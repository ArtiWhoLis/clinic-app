const API_URL = '/api';

// --- Theme Switcher ---
document.addEventListener('DOMContentLoaded', () => {
    const themeSwitcher = document.getElementById('theme-switcher');
    const currentTheme = localStorage.getItem('theme');

    if (currentTheme === 'dark') {
        document.body.classList.add('dark-theme');
        themeSwitcher.textContent = 'üåô';
    } else {
        themeSwitcher.textContent = '‚òÄÔ∏è';
    }

    themeSwitcher.onclick = () => {
        if (document.body.classList.contains('dark-theme')) {
            document.body.classList.remove('dark-theme');
            localStorage.setItem('theme', 'light');
            themeSwitcher.textContent = '‚òÄÔ∏è';
        } else {
            document.body.classList.add('dark-theme');
            localStorage.setItem('theme', 'dark');
            themeSwitcher.textContent = 'üåô';
        }
    };

    // Add focus class to parent form-group for prefixed inputs
    document.querySelectorAll('.form-input.with-prefix').forEach(input => {
        const formGroup = input.closest('.form-group');
        if (formGroup) {
            input.addEventListener('focus', () => {
                formGroup.classList.add('is-focused');
            });
            input.addEventListener('blur', () => {
                formGroup.classList.remove('is-focused');
            });
        }
    });
});

// --- patient.html ---
if (window.location.pathname.endsWith('patient.html')) {
    const tableBody = document.getElementById('doctor-table-body');
    const modalBg = document.getElementById('modal-bg');
    const signupForm = document.getElementById('signup-form');
    const closeModalBtn = document.getElementById('close-modal');
    const toast = document.getElementById('toast');
    const myAppointmentsBtn = document.getElementById('my-appointments-btn');
    const patientBackArrow = document.getElementById('patient-back-arrow');
    
    // SNILS auto-formatting
    const snilsInput = document.getElementById('snils');
    if (snilsInput) {
        snilsInput.addEventListener('input', (e) => {
            const target = e.target;
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            let digits = target.value.replace(/\D/g, '');
            let formatted = '';

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if (digits.length > 0) {
                formatted = digits.substring(0, 3);
            }
            if (digits.length > 3) {
                formatted += '-' + digits.substring(3, 6);
            }
            if (digits.length > 6) {
                formatted += '-' + digits.substring(6, 9);
            }
            if (digits.length > 9) {
                formatted += ' ' + digits.substring(9, 11);
            }
            target.value = formatted;
        });
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
    myAppointmentsBtn.onclick = () => {
        window.location.href = 'my-appointments.html';
    };

    let currentDoctor = null;
    let currentTime = null;
    const modalInfo = document.getElementById('modal-info');

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Å–ª–æ—Ç–æ–≤
    function loadDoctorsTable() {
        fetch(`${API_URL}/doctors`)
            .then(res => res.json())
            .then(doctors => {
                tableBody.innerHTML = '';
                doctors.forEach(doc => {
                    fetch(`${API_URL}/appointments?doctorId=${doc.id}`)
                        .then(res => res.json())
                        .then(apps => {
                            const busyTimes = apps.map(a => a.time);
                            const freeOptions = [];
                            const busyOptions = [];
                            for (let h = 11; h <= 20; h++) {
                                const hour = h < 10 ? '0' + h : h;
                                const timeStr = `${hour}:00`;
                                if (busyTimes.includes(timeStr)) {
                                    busyOptions.push(`<option value="${timeStr}" disabled class="option-busy">${timeStr} (–∑–∞–Ω—è—Ç–æ)</option>`);
                                } else {
                                    freeOptions.push(`<option value="${timeStr}">${timeStr}</option>`);
                                }
                            }
                            let timeOptions = [];
                            if (freeOptions.length > 0) {
                                timeOptions = [...freeOptions];
                                if (busyOptions.length > 0) {
                                    timeOptions.push(`<option disabled class='option-divider'>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</option>`);
                                    timeOptions = [...timeOptions, ...busyOptions];
                                }
                            } else {
                                // –í—Å–µ –∑–∞–Ω—è—Ç–æ
                                timeOptions = [
                                    `<option disabled class='option-divider'>–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω</option>`,
                                    ...busyOptions
                                ];
                            }
                            const tr = document.createElement('tr');
                            tr.innerHTML = `
                                <td>${doc.name}</td>
                                <td>${doc.specialty || '-'}</td>
                                <td><select class="time-select">${timeOptions.join('')}</select></td>
                                <td><button class="signup-btn">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</button></td>
                            `;
                            const select = tr.querySelector('.time-select');
                            const signupBtn = tr.querySelector('.signup-btn');
                            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                            if (freeOptions.length === 0) {
                                signupBtn.disabled = true;
                                signupBtn.textContent = '–ù–µ—Ç –º–µ—Å—Ç';
                            }
                            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
                            if (freeOptions.length > 0) {
                                select.value = freeOptions[0].match(/value=\"(.*?)\"/)[1];
                            }
                            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
                            signupBtn.onclick = () => {
                                currentDoctor = doc;
                                currentTime = select.value;
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ –æ –≤—Ä–∞—á–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
                                if (modalInfo) {
                                    modalInfo.style.display = 'block';
                                    modalInfo.innerHTML = `<b>${doc.name}</b><br><span style='color:#888;'>${doc.specialty || ''}</span><br><span style='color:#1976d2;font-weight:500;'>${currentTime}</span>`;
                                }
                                // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                                openModal(modalBg);
                            };
                            tableBody.appendChild(tr);
                        });
                });
            });
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
    loadDoctorsTable();

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–ø–∏—Å–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    closeModalBtn.onclick = () => {
        document.querySelector('.modal').classList.remove('show');
        setTimeout(() => {
            modalBg.style.display = 'none';
            signupForm.reset();
            if (modalInfo) modalInfo.style.display = 'none';
        }, 250);
    };

    // –ö–ª–∏–∫ –ø–æ —Ñ–æ–Ω—É –º–æ–¥–∞–ª–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ
    modalBg.addEventListener('mousedown', function(e) {
        if (e.target === modalBg) {
            document.querySelector('.modal').classList.remove('show');
            setTimeout(() => {
                modalBg.style.display = 'none';
                signupForm.reset();
                if (modalInfo) modalInfo.style.display = 'none';
            }, 250);
        }
    });

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    function showToast(message, isError = false) {
        toast.textContent = message;
        toast.className = 'toast' + (isError ? ' toast-error' : '');
        toast.style.display = 'block';
        setTimeout(() => {
            toast.style.display = 'none';
        }, 3000);
    }

    // –§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
    function focusFirstInput(modal) {
        setTimeout(() => {
            const input = modal.querySelector('input, select, textarea');
            if (input) input.focus();
        }, 100);
    }

    // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫
    function openModal(modal) {
        modal.style.display = 'flex';
        setTimeout(() => {
            modal.querySelector('.modal').classList.add('show');
            focusFirstInput(modal);
        }, 10);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏
    signupForm.onsubmit = (e) => {
        e.preventDefault();
        const fio = document.getElementById('fio').value.trim();
        const snils = document.getElementById('snils').value.trim();
        const phone = document.getElementById('phone').value.trim();
        const fullPhone = `+7${phone}`;
        if (!fio || !snils || !phone) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
            return;
        }
        // –°–ø–∏–Ω–Ω–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ
        const submitBtn = signupForm.querySelector('.signup-btn');
        const origText = submitBtn.textContent;
        submitBtn.innerHTML = '–ó–∞–ø–∏—Å—å... <span class="button-spinner"></span>';
        submitBtn.disabled = true;
        fetch(`${API_URL}/appointments`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                doctorId: currentDoctor.id,
                name: fio,
                snils: snils,
                phone: fullPhone,
                time: currentTime
            })
        })
        .then(res => res.json())
        .then(data => {
            submitBtn.innerHTML = origText;
            submitBtn.disabled = false;
            if (data.success) {
                showToast(`–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –∫ ${currentDoctor.name} –Ω–∞ ${currentTime}`);
            } else {
                showToast(data.message || '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ.');
            }
            document.querySelector('.modal').classList.remove('show');
            setTimeout(() => {
                modalBg.style.display = 'none';
                signupForm.reset();
                if (modalInfo) modalInfo.style.display = 'none';
                loadDoctorsTable();
            }, 300);
        })
        .catch(err => {
            submitBtn.innerHTML = origText;
            submitBtn.disabled = false;
            showToast('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            document.querySelector('.modal').classList.remove('show');
            setTimeout(() => {
                modalBg.style.display = 'none';
                signupForm.reset();
                if (modalInfo) modalInfo.style.display = 'none';
                loadDoctorsTable();
            }, 300);
        });
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –§–ò–û: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –º–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤
    const fioInput = document.getElementById('fio');
    if (fioInput) {
        fioInput.addEventListener('input', (e) => {
            let val = e.target.value;
            val = val.replace(/[^–ê-–Ø–∞-—èA-Za-z–Å—ë\s]/g, '');
            if (val.length > 40) val = val.slice(0, 40);
            e.target.value = val;
        });
    }

    if (patientBackArrow) {
        patientBackArrow.onclick = () => {
            window.location.href = 'index.html';
        };
    }
}

// --- my-appointments.html ---
if (window.location.pathname.endsWith('my-appointments.html')) {
    const myAppointmentsForm = document.getElementById('my-appointments-form');
    const myAppointmentsList = document.getElementById('my-appointments-list');
    const myBackArrow = document.getElementById('my-back-arrow');
    const myPhoneInput = document.getElementById('my-phone');

    myAppointmentsForm.onsubmit = (e) => {
        e.preventDefault();
        const phone = document.getElementById('my-phone').value.trim();
        if (!phone) {
            myAppointmentsList.innerHTML = '<div style="color:red;">–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</div>';
            return;
        }
        const fullPhone = `+7${phone}`;
        fetch(`${API_URL}/appointments?phone=${encodeURIComponent(fullPhone)}`)
            .then(res => res.json())
            .then(apps => {
                if (!apps.length) {
                    myAppointmentsList.innerHTML = '<div style="color:#1976d2;">–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π</div>';
                } else {
                    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –∏ –±—É–¥—É—â–∏–µ
                    const now = new Date();
                    // –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –ø–æ—è–≤–∏—Ç—Å—è –¥–∞—Ç–∞ ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ, —Å–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    const future = [], past = [];
                    apps.forEach(a => {
                        // a.time –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
                        const [h, m] = a.time.split(':').map(Number);
                        const appDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), h, m);
                        if (appDate >= now) future.push(a); else past.push(a);
                    });
                    let html = '';
                    if (future.length) {
                        html += '<div style="margin-bottom:12px;"><b>–ë—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏:</b></div>';
                        html += `<table class="doctor-table"><thead><tr><th>–í—Ä–µ–º—è</th><th>–í—Ä–∞—á</th><th>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</th><th></th></tr></thead><tbody>`;
                        html += future.map(a => `
                            <tr>
                                <td>${a.time}</td>
                                <td>${a.doctorName || '–í—Ä–∞—á'}</td>
                                <td>${a.specialty || '-'}</td>
                                <td><button class="delete-btn" data-id="${a.id}">–û—Ç–º–µ–Ω–∏—Ç—å</button></td>
                            </tr>
                        `).join('');
                        html += '</tbody></table>';
                    }
                    if (past.length) {
                        html += '<div style="margin:18px 0 8px 0;"><b>–ü—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏:</b></div>';
                        html += `<table class="doctor-table"><thead><tr><th>–í—Ä–µ–º—è</th><th>–í—Ä–∞—á</th><th>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</th></tr></thead><tbody>`;
                        html += past.map(a => `
                            <tr>
                                <td>${a.time}</td>
                                <td>${a.doctorName || '–í—Ä–∞—á'}</td>
                                <td>${a.specialty || '-'}</td>
                            </tr>
                        `).join('');
                        html += '</tbody></table>';
                    }
                    myAppointmentsList.innerHTML = html;
                    // –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –±—É–¥—É—â–∏—Ö
                    myAppointmentsList.querySelectorAll('.delete-btn').forEach(btn => {
                        btn.onclick = () => {
                            confirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?').then(ok => {
                                if (!ok) return;
                                fetch(`/api/appointments/${btn.dataset.id}?phone=${encodeURIComponent(myPhoneInput.value.trim())}`, { method: 'DELETE' })
                                .then(res => res.json())
                                .then(data => {
                                    if (data.success) {
                                        btn.closest('tr').remove();
                                    } else {
                                        alert(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                                    }
                                })
                                .catch(() => alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'));
                            });
                        };
                    });
                }
            })
            .catch(() => {
                myAppointmentsList.innerHTML = '<div style="color:red;">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º</div>';
            });
    };

    if (myBackArrow) {
        myBackArrow.onclick = () => {
            window.location.href = 'patient.html';
        };
    }
}

// --- admin.html ---
if (window.location.pathname.endsWith('admin.html')) {
    const loginDiv = document.getElementById('admin-login');
    const panelDiv = document.getElementById('admin-panel');
    const loginForm = document.getElementById('admin-login-form');
    const loginResult = document.getElementById('admin-login-result');
    const doctorListDiv = document.getElementById('admin-doctor-list');
    const appointmentsDiv = document.getElementById('admin-appointments');
    const logoutBtn = document.getElementById('admin-logout-btn');
    const addDoctorForm = document.getElementById('add-doctor-form');
    const backArrow = document.getElementById('admin-back-arrow');
    let token = null;

    loginForm.onsubmit = (e) => {
        e.preventDefault();
        const username = document.getElementById('admin-username').value;
        const password = document.getElementById('admin-password').value;
        const loginBtn = document.getElementById('admin-login-btn');
        const origText = loginBtn.textContent;
        loginBtn.innerHTML = '–í—Ö–æ–¥... <span class="button-spinner"></span>';
        loginBtn.disabled = true;
        fetch(`/api/admin/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password })
        })
        .then(res => res.json())
        .then(data => {
            loginBtn.innerHTML = origText;
            loginBtn.disabled = false;
            if (data.success) {
                token = data.token;
                loginDiv.style.display = 'none';
                panelDiv.style.display = 'block';
                loadDoctors();
            } else {
                // –ï—Å–ª–∏ –Ω–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –≤—Ä–∞—á
                fetch('/api/doctor/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                })
                .then(res => res.json())
                .then(docData => {
                    if (docData.success) {
                        loginDiv.style.display = 'none';
                        panelDiv.style.display = 'block';
                        document.getElementById('doctor-management').style.display = 'none';
                        document.getElementById('admin-doctor-list').style.display = 'none';
                        var docListTitle = document.getElementById('admin-doctor-list-title');
                        if (docListTitle) docListTitle.style.display = 'none';
                        loadAppointments(docData.doctorId, docData.name, docData.specialty, true);
                    } else {
                        loginResult.textContent = docData.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
                    }
                });
            }
        })
        .catch(() => {
            loginBtn.innerHTML = origText;
            loginBtn.disabled = false;
            loginResult.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
        });
    };

    function loadDoctors() {
        fetch(`/api/doctors`, {
            headers: { 'Authorization': `Bearer ${token}` }
        })
        .then(res => res.json())
        .then(doctors => {
            doctorListDiv.innerHTML = '';
            doctors.forEach(doc => {
                const docContainer = document.createElement('div');
                docContainer.style.display = 'flex';
                docContainer.style.alignItems = 'center';
                docContainer.style.justifyContent = 'center';
                docContainer.style.margin = '8px 0';

                const btn = document.createElement('button');
                btn.innerHTML = `${doc.name} (${doc.specialty}) <span style="font-weight:normal;opacity:0.8;"> - ${doc.appointmentCount} –∑–∞–ø–∏—Å–µ–π</span>`;
                btn.className = 'role-btn';
                btn.style.margin = '0';
                btn.style.width = 'auto';
                btn.style.flexGrow = '1';
                btn.onclick = () => loadAppointments(doc.id, doc.name, doc.specialty);
                
                const editBtn = document.createElement('button');
                editBtn.className = 'profile-icon-btn';
                editBtn.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
                editBtn.innerHTML = '‚úèÔ∏è';
                editBtn.onclick = () => openEditDoctorModal(doc);

                const profileBtn = document.createElement('button');
                profileBtn.className = 'profile-icon-btn';
                profileBtn.title = '–ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞';
                profileBtn.innerHTML = '&#128100;';
                profileBtn.onclick = () => openDoctorProfile(doc);

                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
                deleteBtn.className = 'delete-btn';
                deleteBtn.style.marginLeft = '16px';
                deleteBtn.onclick = () => deleteDoctor(doc.id);

                docContainer.appendChild(btn);
                docContainer.appendChild(editBtn);
                docContainer.appendChild(profileBtn);
                docContainer.appendChild(deleteBtn);
                doctorListDiv.appendChild(docContainer);
            });
        });
    }

    function deleteDoctor(doctorId) {
        confirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞? –í—Å–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!').then(ok => {
            if (!ok) return;
            fetch(`/api/doctors/${doctorId}`, {
                method: 'DELETE',
                headers: { 'Authorization': `Bearer ${token}` }
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    loadDoctors();
                    appointmentsDiv.innerHTML = '';
                } else {
                    alert(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                }
            });
        });
    }

    addDoctorForm.onsubmit = (e) => {
        e.preventDefault();
        const nameInput = document.getElementById('new-doctor-name');
        const specialtyInput = document.getElementById('new-doctor-specialty');
        const name = nameInput.value.trim();
        const specialty = specialtyInput.value.trim();
        const addBtn = addDoctorForm.querySelector('.signup-btn');
        const origText = addBtn.textContent;
        addBtn.innerHTML = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ... <span class="button-spinner"></span>';
        addBtn.disabled = true;
        if (!name || !specialty) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            addBtn.innerHTML = origText;
            addBtn.disabled = false;
            return;
        }
        fetch('/api/doctors', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ name, specialty })
        })
        .then(res => res.json())
        .then(data => {
            addBtn.innerHTML = origText;
            addBtn.disabled = false;
            if (data.success) {
                loadDoctors();
                nameInput.value = '';
                specialtyInput.value = '';
            } else {
                alert(data.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
            }
        });
    };

    function loadAppointments(doctorId, doctorName, specialty, isDoctor) {
        fetch(`/api/appointments?doctorId=${doctorId}`)
        .then(res => res.json())
        .then(apps => {
            appointmentsDiv.innerHTML = `<h3>–ó–∞–ø–∏—Å–∏ –∫ ${doctorName} (${specialty}):</h3>`;
            if (!apps.length) {
                appointmentsDiv.innerHTML += '<p>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</p>';
            } else {
                appointmentsDiv.innerHTML += `
                    <table class="doctor-table">
                        <thead>
                            <tr>
                                <th>–í—Ä–µ–º—è</th>
                                <th>–§–ò–û</th>
                                <th>–°–ù–ò–õ–°</th>
                                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                                ${!isDoctor ? '<th>–î–µ–π—Å—Ç–≤–∏–µ</th>' : ''}
                            </tr>
                        </thead>
                        <tbody>
                            ${apps.map(a => `
                                <tr id="appointment-${a.id}">
                                    <td>${a.time}</td>
                                    <td>${a.name}</td>
                                    <td>${a.snils}</td>
                                    <td>${a.phone}</td>
                                    ${!isDoctor ? `<td><button class="delete-btn" data-id="${a.id}">–û—Ç–º–µ–Ω–∏—Ç—å</button></td>` : ''}
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
                if (!isDoctor) {
                    appointmentsDiv.querySelectorAll('.delete-btn').forEach(btn => {
                        btn.onclick = () => deleteAppointment(btn.dataset.id, doctorId, doctorName, specialty);
                    });
                }
            }
        });
    }

    function deleteAppointment(appointmentId, currentDoctorId, currentDoctorName, currentSpecialty) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
            return;
        }
        fetch(`/api/appointments/${appointmentId}`, {
            method: 'DELETE',
            headers: { 'Authorization': `Bearer ${token}` }
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                // –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ DOM, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º
                loadAppointments(currentDoctorId, currentDoctorName, currentSpecialty);
            } else {
                alert(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
            }
        })
        .catch(() => alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'));
    }

    if (logoutBtn) {
        logoutBtn.onclick = () => {
            token = null;
            panelDiv.style.display = 'none';
            loginDiv.style.display = 'block';
            document.getElementById('admin-username').value = '';
            document.getElementById('admin-password').value = '';
            loginResult.textContent = '';
            appointmentsDiv.innerHTML = '';
        };
    }

    if (backArrow) {
        backArrow.onclick = () => {
            window.location.href = 'index.html';
        };
    }

    // --- –ú–æ–¥–∞–ª–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä–∞—á–∞ ---
    const doctorProfileModal = document.getElementById('doctor-profile-modal');
    const doctorProfileInfo = document.getElementById('doctor-profile-info');
    const doctorCredentialsForm = document.getElementById('doctor-credentials-form');
    const doctorUsernameInput = document.getElementById('doctor-username');
    const doctorPasswordInput = document.getElementById('doctor-password');
    const doctorProfileClose = document.getElementById('doctor-profile-close');
    const doctorProfileResult = document.getElementById('doctor-profile-result');
    const doctorProfileViewApps = document.getElementById('doctor-profile-view-apps');
    let currentProfileDoctor = null;

    function openDoctorProfile(doc) {
        currentProfileDoctor = doc;
        doctorProfileInfo.innerHTML = `<b>${doc.name}</b><br><span style='color:#888;'>${doc.specialty || ''}</span>`;
        doctorUsernameInput.value = doc.username || '';
        doctorPasswordInput.value = doc.password || '';
        doctorProfileResult.textContent = '';
        openModal(doctorProfileModal);
    }
    doctorProfileClose.onclick = () => {
        doctorProfileModal.style.display = 'none';
    };
    doctorCredentialsForm.onsubmit = (e) => {
        e.preventDefault();
        if (!currentProfileDoctor) return;
        fetch(`/api/doctors/${currentProfileDoctor.id}/credentials`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                username: doctorUsernameInput.value.trim(),
                password: doctorPasswordInput.value.trim()
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                doctorProfileResult.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                loadDoctors();
            } else {
                doctorProfileResult.textContent = data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
            }
        });
    };
    doctorProfileViewApps.onclick = () => {
        if (!currentProfileDoctor) return;
        doctorProfileModal.style.display = 'none';
        loadAppointments(currentProfileDoctor.id, currentProfileDoctor.name, currentProfileDoctor.specialty);
    };

    // --- –ú–æ–¥–∞–ª–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞ ---
    const editDoctorModal = document.getElementById('edit-doctor-modal');
    const editDoctorForm = document.getElementById('edit-doctor-form');
    const editDoctorName = document.getElementById('edit-doctor-name');
    const editDoctorSpecialty = document.getElementById('edit-doctor-specialty');
    const editDoctorUsername = document.getElementById('edit-doctor-username');
    const editDoctorCancel = document.getElementById('edit-doctor-cancel');
    const editDoctorResult = document.getElementById('edit-doctor-result');
    let currentEditDoctorId = null;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –§–ò–û –≤—Ä–∞—á–∞: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –º–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤
    if (editDoctorName) {
        editDoctorName.addEventListener('input', (e) => {
            let val = e.target.value;
            val = val.replace(/[^–ê-–Ø–∞-—èA-Za-z–Å—ë\s]/g, '');
            if (val.length > 40) val = val.slice(0, 40);
            e.target.value = val;
        });
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    function openEditDoctorModal(doc) {
        currentEditDoctorId = doc.id;
        editDoctorName.value = doc.name || '';
        editDoctorSpecialty.value = doc.specialty || '';
        editDoctorUsername.value = doc.username || '';
        editDoctorResult.textContent = '';
        openModal(editDoctorModal);
    }
    if (editDoctorCancel) {
        editDoctorCancel.onclick = () => {
            editDoctorModal.style.display = 'none';
        };
    }
    editDoctorForm.onsubmit = (e) => {
        e.preventDefault();
        if (!currentEditDoctorId) return;
        const saveBtn = editDoctorForm.querySelector('.signup-btn');
        const origText = saveBtn.textContent;
        saveBtn.innerHTML = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ... <span class="button-spinner"></span>';
        saveBtn.disabled = true;
        fetch(`/api/doctors/${currentEditDoctorId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                name: editDoctorName.value.trim(),
                specialty: editDoctorSpecialty.value.trim(),
                username: editDoctorUsername.value.trim()
            })
        })
        .then(res => res.json())
        .then(data => {
            saveBtn.innerHTML = origText;
            saveBtn.disabled = false;
            if (data.success) {
                editDoctorResult.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                setTimeout(() => {
                    editDoctorModal.style.display = 'none';
                    loadDoctors();
                }, 600);
            } else {
                editDoctorResult.textContent = data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
            }
        })
        .catch(() => {
            saveBtn.innerHTML = origText;
            saveBtn.disabled = false;
            editDoctorResult.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
        });
    };
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function confirmModal(message) {
    return new Promise(resolve => {
        const modal = document.getElementById('confirm-modal');
        const text = document.getElementById('confirm-modal-text');
        const yes = document.getElementById('confirm-yes');
        const no = document.getElementById('confirm-no');
        text.textContent = message;
        modal.style.display = 'flex';
        function close(result) {
            modal.style.display = 'none';
            yes.onclick = null;
            no.onclick = null;
            resolve(result);
        }
        yes.onclick = () => close(true);
        no.onclick = () => close(false);
    });
}