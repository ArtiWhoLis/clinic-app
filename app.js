const API_URL = '/api';

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª–æ–∫ ---
function focusFirstInput(modal) {
    setTimeout(() => {
        const input = modal.querySelector('input, select, textarea');
        if (input) input.focus();
    }, 100);
}
function openModal(modal) {
    modal.style.display = 'flex';
    setTimeout(() => {
        const modalWindow = modal.querySelector('.modal');
        if (modalWindow) {
            modalWindow.classList.remove('hide');
            modalWindow.classList.add('show');
        }
        focusFirstInput(modal);
    }, 10);
}

// --- Theme Switcher ---
document.addEventListener('DOMContentLoaded', () => {
    const themeSwitcher = document.getElementById('theme-switcher');
    const currentTheme = localStorage.getItem('theme');

    if (currentTheme === 'dark') {
        document.body.classList.add('dark-theme');
        themeSwitcher.textContent = 'üåô';
    } else {
        themeSwitcher.textContent = '‚òÄÔ∏è';
    }

    themeSwitcher.onclick = () => {
        if (document.body.classList.contains('dark-theme')) {
            document.body.classList.remove('dark-theme');
            localStorage.setItem('theme', 'light');
            themeSwitcher.textContent = '‚òÄÔ∏è';
        } else {
            document.body.classList.add('dark-theme');
            localStorage.setItem('theme', 'dark');
            themeSwitcher.textContent = 'üåô';
        }
    };

    // Add focus class to parent form-group for prefixed inputs
    document.querySelectorAll('.form-input.with-prefix').forEach(input => {
        const formGroup = input.closest('.form-group');
        if (formGroup) {
            input.addEventListener('focus', () => {
                formGroup.classList.add('is-focused');
            });
            input.addEventListener('blur', () => {
                formGroup.classList.remove('is-focused');
            });
        }
    });
});

// --- patient.html ---
if (window.location.pathname.endsWith('patient.html')) {
    const doctorCards = document.getElementById('doctor-cards');
    const calendarSection = document.getElementById('calendar-section');
    const calendarContainer = document.getElementById('calendar-container');
    const modalBg = document.getElementById('modal-bg');
    const signupForm = document.getElementById('signup-form');
    const closeModalBtn = document.getElementById('close-modal');
    const toast = document.getElementById('toast');
    const myAppointmentsBtn = document.getElementById('my-appointments-btn');
    const patientBackArrow = document.getElementById('patient-back-arrow');
    
    let selectedDoctor = null;
    let calendar = null;
    
    // SNILS auto-formatting
    const snilsInput = document.getElementById('snils');
    if (snilsInput) {
        snilsInput.addEventListener('input', (e) => {
            const target = e.target;
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            let digits = target.value.replace(/\D/g, '');
            let formatted = '';

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if (digits.length > 0) {
                formatted = digits.substring(0, 3);
            }
            if (digits.length > 3) {
                formatted += '-' + digits.substring(3, 6);
            }
            if (digits.length > 6) {
                formatted += '-' + digits.substring(6, 9);
            }
            if (digits.length > 9) {
                formatted += ' ' + digits.substring(9, 11);
            }
            target.value = formatted;
        });
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
    myAppointmentsBtn.onclick = () => {
        window.location.href = 'my-appointments.html';
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π
    function loadDoctors() {
        fetch(`${API_URL}/doctors`)
            .then(res => res.json())
            .then(doctors => {
                doctorCards.innerHTML = '';
                doctors.forEach(doc => {
                    const card = document.createElement('div');
                    card.className = 'doctor-card';
                    card.innerHTML = `
                        <div class="doctor-avatar">${doc.name.charAt(0)}</div>
                        <div class="doctor-name">${doc.name}</div>
                        <div class="doctor-specialty">${doc.specialty || '-'}</div>
                        <div class="doctor-stats">
                            <span>üìÖ ${doc.appointmentCount || 0} –∑–∞–ø–∏—Å–µ–π</span>
                        </div>
                    `;
                    
                    card.onclick = () => selectDoctor(doc);
                    doctorCards.appendChild(card);
                });
            })
            .catch(err => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–∞—á–µ–π:', err);
                doctorCards.innerHTML = '<p style="color: red; text-align: center;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π</p>';
            });
    }
    
    function selectDoctor(doctor) {
        selectedDoctor = doctor;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        document.querySelectorAll('.doctor-card').forEach(card => {
            card.classList.remove('selected');
        });
        event.target.closest('.doctor-card').classList.add('selected');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendarSection.style.display = 'block';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        if (calendar) {
            calendar.reset();
        }
        
        calendar = new AppointmentCalendar(calendarContainer, {
            doctorId: doctor.id,
            onDateSelect: (date) => {
                console.log('–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:', date);
            },
            onTimeSelect: (date, time) => {
                console.log('–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è:', date, time);
                openAppointmentModal(doctor, date, time);
            }
        });
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        calendarSection.scrollIntoView({ behavior: 'smooth' });
    }
    
    function openAppointmentModal(doctor, date, time) {
        const modalInfo = document.getElementById('modal-info');
        if (modalInfo) {
            modalInfo.style.display = 'block';
            const dateObj = new Date(date);
            const formattedDate = dateObj.toLocaleDateString('ru-RU', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            modalInfo.innerHTML = `
                <b>${doctor.name}</b><br>
                <span style='color:#888;'>${doctor.specialty || ''}</span><br>
                <span style='color:#1976d2;font-weight:500;'>${formattedDate} –≤ ${time}</span>
            `;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–µ
        signupForm.dataset.selectedDate = date;
        signupForm.dataset.selectedTime = time;
        
        openModal(modalBg);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    loadDoctors();

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–ø–∏—Å–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    closeModalBtn.onclick = () => {
        document.querySelector('.modal').classList.remove('show');
        setTimeout(() => {
            modalBg.style.display = 'none';
            signupForm.reset();
            const modalInfo = document.getElementById('modal-info');
            if (modalInfo) modalInfo.style.display = 'none';
        }, 250);
    };

    // –ö–ª–∏–∫ –ø–æ —Ñ–æ–Ω—É –º–æ–¥–∞–ª–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ
    modalBg.addEventListener('mousedown', function(e) {
        if (e.target === modalBg) {
            document.querySelector('.modal').classList.remove('show');
            setTimeout(() => {
                modalBg.style.display = 'none';
                signupForm.reset();
                const modalInfo = document.getElementById('modal-info');
                if (modalInfo) modalInfo.style.display = 'none';
            }, 250);
        }
    });

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    function showToast(message, isError = false) {
        toast.textContent = message;
        toast.className = 'toast' + (isError ? ' toast-error' : '');
        toast.style.display = 'block';
        setTimeout(() => {
            toast.style.display = 'none';
        }, 3000);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏
    signupForm.onsubmit = (e) => {
        e.preventDefault();
        const fio = document.getElementById('fio').value.trim();
        const snils = document.getElementById('snils').value.trim();
        const phone = document.getElementById('phone').value.trim();
        const fullPhone = `+7${phone}`;
        const selectedDate = signupForm.dataset.selectedDate;
        const selectedTime = signupForm.dataset.selectedTime;
        
        if (!fio || !snils || !phone || !selectedDate || !selectedTime) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è!');
            return;
        }
        
        // –°–ø–∏–Ω–Ω–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ
        const submitBtn = signupForm.querySelector('.signup-btn');
        const origText = submitBtn.textContent;
        submitBtn.innerHTML = '–ó–∞–ø–∏—Å—å... <span class="button-spinner"></span>';
        submitBtn.disabled = true;
        
        fetch(`${API_URL}/appointments`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                doctorId: selectedDoctor.id,
                name: fio,
                snils: snils,
                phone: fullPhone,
                time: selectedTime,
                date: selectedDate
            })
        })
        .then(res => res.json())
        .then(data => {
            submitBtn.innerHTML = origText;
            submitBtn.disabled = false;
            if (data.success) {
                showToast(`–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –∫ ${selectedDoctor.name} –Ω–∞ ${selectedDate} –≤ ${selectedTime}`);
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                if (calendar) {
                    calendar.updateCalendar();
                }
            } else {
                showToast(data.message || '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ.', true);
            }
            document.querySelector('.modal').classList.remove('show');
            setTimeout(() => {
                modalBg.style.display = 'none';
                signupForm.reset();
                const modalInfo = document.getElementById('modal-info');
                if (modalInfo) modalInfo.style.display = 'none';
            }, 300);
        })
        .catch(err => {
            submitBtn.innerHTML = origText;
            submitBtn.disabled = false;
            showToast('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', true);
            document.querySelector('.modal').classList.remove('show');
            setTimeout(() => {
                modalBg.style.display = 'none';
                signupForm.reset();
                const modalInfo = document.getElementById('modal-info');
                if (modalInfo) modalInfo.style.display = 'none';
            }, 300);
        });
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –§–ò–û: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã, –º–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤
    const fioInput = document.getElementById('fio');
    if (fioInput) {
        fioInput.addEventListener('input', (e) => {
            let val = e.target.value;
            val = val.replace(/[^–ê-–Ø–∞-—èA-Za-z–Å—ë.\s]/g, '');
            if (val.length > 40) val = val.slice(0, 40);
            e.target.value = val;
        });
    }

    if (patientBackArrow) {
        patientBackArrow.onclick = () => {
            window.location.href = 'index.html';
        };
    }
}

// --- my-appointments.html ---
if (window.location.pathname.endsWith('my-appointments.html')) {
    const myAppointmentsForm = document.getElementById('my-appointments-form');
    const myAppointmentsList = document.getElementById('my-appointments-list');
    const myBackArrow = document.getElementById('my-back-arrow');
    const myPhoneInput = document.getElementById('my-phone');

    myAppointmentsForm.onsubmit = (e) => {
        e.preventDefault();
        const phone = document.getElementById('my-phone').value.trim();
        if (!phone) {
            myAppointmentsList.innerHTML = '<div style="color:red;">–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</div>';
            return;
        }
        const fullPhone = `+7${phone}`;
        fetch(`${API_URL}/appointments?phone=${encodeURIComponent(fullPhone)}`)
            .then(res => res.json())
            .then(apps => {
                if (!apps.length) {
                    myAppointmentsList.innerHTML = '<div style="color:#1976d2;">–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π</div>';
                } else {
                    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –∏ –±—É–¥—É—â–∏–µ
                    const now = new Date();
                    const future = [], past = [];
                    apps.forEach(a => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                        const appointmentDate = new Date(a.date + 'T' + a.time);
                        if (appointmentDate >= now) {
                            future.push(a);
                        } else {
                            past.push(a);
                        }
                    });
                    
                    let html = '';
                    if (future.length) {
                        html += '<div style="margin-bottom:12px;"><b>–ë—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏:</b></div>';
                        html += `<table class="doctor-table"><thead><tr><th>–î–∞—Ç–∞</th><th>–í—Ä–µ–º—è</th><th>–í—Ä–∞—á</th><th>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</th><th></th></tr></thead><tbody>`;
                        html += future.map(a => {
                            const dateObj = new Date(a.date);
                            const formattedDate = dateObj.toLocaleDateString('ru-RU', { 
                                weekday: 'short', 
                                month: 'short', 
                                day: 'numeric' 
                            });
                            return `
                                <tr>
                                    <td>${formattedDate}</td>
                                    <td>${a.time}</td>
                                    <td>${a.doctorName || '–í—Ä–∞—á'}</td>
                                    <td>${a.specialty || '-'}</td>
                                    <td><button class="delete-btn" data-id="${a.id}">–û—Ç–º–µ–Ω–∏—Ç—å</button></td>
                                </tr>
                            `;
                        }).join('');
                        html += '</tbody></table>';
                    }
                    if (past.length) {
                        html += '<div style="margin:18px 0 8px 0;"><b>–ü—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏:</b></div>';
                        html += `<table class="doctor-table"><thead><tr><th>–î–∞—Ç–∞</th><th>–í—Ä–µ–º—è</th><th>–í—Ä–∞—á</th><th>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</th></tr></thead><tbody>`;
                        html += past.map(a => {
                            const dateObj = new Date(a.date);
                            const formattedDate = dateObj.toLocaleDateString('ru-RU', { 
                                weekday: 'short', 
                                month: 'short', 
                                day: 'numeric' 
                            });
                            return `
                                <tr>
                                    <td>${formattedDate}</td>
                                    <td>${a.time}</td>
                                    <td>${a.doctorName || '–í—Ä–∞—á'}</td>
                                    <td>${a.specialty || '-'}</td>
                                </tr>
                            `;
                        }).join('');
                        html += '</tbody></table>';
                    }
                    myAppointmentsList.innerHTML = html;
                    // –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –±—É–¥—É—â–∏—Ö
                    myAppointmentsList.querySelectorAll('.delete-btn').forEach(btn => {
                        btn.onclick = () => {
                            confirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?').then(ok => {
                                if (!ok) return;
                                fetch(`/api/appointments/${btn.dataset.id}?phone=${encodeURIComponent(myPhoneInput.value.trim())}`, { method: 'DELETE' })
                                .then(res => res.json())
                                .then(data => {
                                    if (data.success) {
                                        btn.closest('tr').remove();
                                    } else {
                                        alert(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                                    }
                                })
                                .catch(() => alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'));
                            });
                        };
                    });
                }
            })
            .catch(() => {
                myAppointmentsList.innerHTML = '<div style="color:red;">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º</div>';
            });
    };

    if (myBackArrow) {
        myBackArrow.onclick = () => {
            window.location.href = 'patient.html';
        };
    }
}

// --- admin.html ---
if (window.location.pathname.endsWith('admin.html')) {
    const loginDiv = document.getElementById('admin-login');
    const panelDiv = document.getElementById('admin-panel');
    const loginForm = document.getElementById('admin-login-form');
    const loginResult = document.getElementById('admin-login-result');
    const doctorListDiv = document.getElementById('admin-doctor-list');
    const appointmentsDiv = document.getElementById('admin-appointments');
    const logoutBtn = document.getElementById('admin-logout-btn');
    const addDoctorForm = document.getElementById('add-doctor-form');
    const backArrow = document.getElementById('admin-back-arrow');
    const showLogsBtn = document.getElementById('show-logs-btn');
    const logsModal = document.getElementById('logs-modal');
    const logsCloseBtn = document.getElementById('logs-close-btn');
    const logsTableBody = document.getElementById('logs-table-body');
    const logsFilter = document.getElementById('logs-filter');
    let token = null;

    loginForm.onsubmit = (e) => {
        e.preventDefault();
        const username = document.getElementById('admin-username').value;
        const password = document.getElementById('admin-password').value;
        const loginBtn = document.getElementById('admin-login-btn');
        const origText = loginBtn.textContent;
        loginBtn.innerHTML = '–í—Ö–æ–¥... <span class="button-spinner"></span>';
        loginBtn.disabled = true;
        fetch(`/api/admin/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password })
        })
        .then(res => res.json())
        .then(data => {
            loginBtn.innerHTML = origText;
            loginBtn.disabled = false;
            if (data.success) {
                token = data.token;
                loginDiv.style.display = 'none';
                panelDiv.style.display = 'block';
                loadDoctors();
            } else {
                // –ï—Å–ª–∏ –Ω–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –≤—Ä–∞—á
                fetch('/api/doctor/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                })
                .then(res => res.json())
                .then(docData => {
                    if (docData.success) {
                        loginDiv.style.display = 'none';
                        panelDiv.style.display = 'block';
                        document.getElementById('doctor-management').style.display = 'none';
                        document.getElementById('admin-doctor-list').style.display = 'none';
                        var docListTitle = document.getElementById('admin-doctor-list-title');
                        if (docListTitle) docListTitle.style.display = 'none';
                        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –õ–æ–≥–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤—Ä–∞—á–µ–π
                        if (showLogsBtn) showLogsBtn.style.display = 'none';
                        loadAppointments(docData.doctorId, docData.name, docData.specialty, true);
                    } else {
                        loginResult.textContent = docData.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
                    }
                });
            }
        })
        .catch(() => {
            loginBtn.innerHTML = origText;
            loginBtn.disabled = false;
            loginResult.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
        });
    };

    function loadDoctors() {
        fetch(`/api/doctors`, {
            headers: { 'Authorization': `Bearer ${token}` }
        })
        .then(res => res.json())
        .then(doctors => {
            doctorListDiv.innerHTML = '';
            doctors.forEach(doc => {
                const docContainer = document.createElement('div');
                docContainer.style.display = 'flex';
                docContainer.style.alignItems = 'center';
                docContainer.style.justifyContent = 'center';
                docContainer.style.margin = '8px 0';

                const btn = document.createElement('button');
                btn.innerHTML = `${doc.name} (${doc.specialty}) <span style="font-weight:normal;opacity:0.8;"> - ${doc.appointmentCount} –∑–∞–ø–∏—Å–µ–π</span>`;
                btn.className = 'role-btn';
                btn.style.margin = '0';
                btn.style.width = 'auto';
                btn.style.flexGrow = '1';
                btn.onclick = () => loadAppointments(doc.id, doc.name, doc.specialty);
                
                const editBtn = document.createElement('button');
                editBtn.className = 'profile-icon-btn';
                editBtn.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
                editBtn.innerHTML = '‚úèÔ∏è';
                editBtn.onclick = () => openEditDoctorModal(doc);

                const profileBtn = document.createElement('button');
                profileBtn.className = 'profile-icon-btn';
                profileBtn.title = '–ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞';
                profileBtn.innerHTML = '&#128100;';
                profileBtn.onclick = () => openDoctorProfile(doc);

                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
                deleteBtn.className = 'delete-btn';
                deleteBtn.style.marginLeft = '16px';
                deleteBtn.onclick = () => deleteDoctor(doc.id);

                docContainer.appendChild(btn);
                docContainer.appendChild(editBtn);
                docContainer.appendChild(profileBtn);
                docContainer.appendChild(deleteBtn);
                doctorListDiv.appendChild(docContainer);
            });
        });
    }

    function deleteDoctor(doctorId) {
        confirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞? –í—Å–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!').then(ok => {
            if (!ok) return;
            fetch(`/api/doctors/${doctorId}`, {
                method: 'DELETE',
                headers: { 'Authorization': `Bearer ${token}` }
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    loadDoctors();
                    appointmentsDiv.innerHTML = '';
                } else {
                    alert(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                }
            });
        });
    }

    addDoctorForm.onsubmit = (e) => {
        e.preventDefault();
        const nameInput = document.getElementById('new-doctor-name');
        const specialtyInput = document.getElementById('new-doctor-specialty');
        const name = nameInput.value.trim();
        const specialty = specialtyInput.value.trim();
        const addBtn = addDoctorForm.querySelector('.signup-btn');
        const origText = addBtn.textContent;
        addBtn.innerHTML = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ... <span class="button-spinner"></span>';
        addBtn.disabled = true;
        if (!name || !specialty) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            addBtn.innerHTML = origText;
            addBtn.disabled = false;
            return;
        }
        fetch('/api/doctors', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ name, specialty })
        })
        .then(res => res.json())
        .then(data => {
            addBtn.innerHTML = origText;
            addBtn.disabled = false;
            if (data.success) {
                loadDoctors();
                nameInput.value = '';
                specialtyInput.value = '';
            } else {
                alert(data.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
            }
        });
    };

    function loadAppointments(doctorId, doctorName, specialty, isDoctor) {
        fetch(`/api/appointments?doctorId=${doctorId}`)
        .then(res => res.json())
        .then(apps => {
            appointmentsDiv.innerHTML = `<h3>–ó–∞–ø–∏—Å–∏ –∫ ${doctorName} (${specialty}):</h3>`;
            if (!apps.length) {
                appointmentsDiv.innerHTML += '<p>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</p>';
            } else {
                appointmentsDiv.innerHTML += `
                    <table class="doctor-table">
                        <thead>
                            <tr>
                                <th>–î–∞—Ç–∞</th>
                                <th>–í—Ä–µ–º—è</th>
                                <th>–§–ò–û</th>
                                <th>–°–ù–ò–õ–°</th>
                                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                                ${!isDoctor ? '<th>–î–µ–π—Å—Ç–≤–∏–µ</th>' : ''}
                            </tr>
                        </thead>
                        <tbody>
                            ${apps.map(a => {
                                const dateObj = new Date(a.date);
                                const formattedDate = dateObj.toLocaleDateString('ru-RU', { 
                                    weekday: 'short', 
                                    month: 'short', 
                                    day: 'numeric' 
                                });
                                return `
                                    <tr id="appointment-${a.id}">
                                        <td>${formattedDate}</td>
                                        <td>${a.time}</td>
                                        <td>${a.name}</td>
                                        <td>${a.snils}</td>
                                        <td>+7${a.phone}</td>
                                        ${!isDoctor ? `<td><button class="delete-btn" data-id="${a.id}">–û—Ç–º–µ–Ω–∏—Ç—å</button></td>` : ''}
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>
                `;
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
                if (!isDoctor) {
                    appointmentsDiv.querySelectorAll('.delete-btn').forEach(btn => {
                        btn.onclick = () => deleteAppointment(btn.dataset.id, doctorId, doctorName, specialty);
                    });
                }
            }
        });
    }

    function deleteAppointment(appointmentId, currentDoctorId, currentDoctorName, currentSpecialty) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
            return;
        }
        fetch(`/api/appointments/${appointmentId}`, {
            method: 'DELETE',
            headers: { 'Authorization': `Bearer ${token}` }
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                // –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ DOM, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º
                loadAppointments(currentDoctorId, currentDoctorName, currentSpecialty);
            } else {
                alert(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
            }
        })
        .catch(() => alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'));
    }

    if (logoutBtn) {
        logoutBtn.onclick = () => {
            token = null;
            panelDiv.style.display = 'none';
            loginDiv.style.display = 'block';
            document.getElementById('admin-username').value = '';
            document.getElementById('admin-password').value = '';
            loginResult.textContent = '';
            appointmentsDiv.innerHTML = '';
        };
    }

    if (backArrow) {
        backArrow.onclick = () => {
            window.location.href = 'index.html';
        };
    }

    // --- –ú–æ–¥–∞–ª–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä–∞—á–∞ ---
    const doctorProfileModal = document.getElementById('doctor-profile-modal');
    const doctorProfileInfo = document.getElementById('doctor-profile-info');
    const doctorCredentialsForm = document.getElementById('doctor-credentials-form');
    const doctorUsernameInput = document.getElementById('doctor-username');
    const doctorPasswordInput = document.getElementById('doctor-password');
    const doctorProfileClose = document.getElementById('doctor-profile-close');
    const doctorProfileResult = document.getElementById('doctor-profile-result');
    const doctorProfileViewApps = document.getElementById('doctor-profile-view-apps');
    let currentProfileDoctor = null;

    function openDoctorProfile(doc) {
        currentProfileDoctor = doc;
        doctorProfileInfo.innerHTML = `<b>${doc.name}</b><br><span style='color:#888;'>${doc.specialty || ''}</span>`;
        doctorUsernameInput.value = doc.username || '';
        doctorPasswordInput.value = doc.password || '';
        doctorProfileResult.textContent = '';
        openModal(doctorProfileModal);
    }
    doctorProfileClose.onclick = () => {
        doctorProfileModal.style.display = 'none';
    };
    doctorCredentialsForm.onsubmit = (e) => {
        e.preventDefault();
        if (!currentProfileDoctor) return;
        fetch(`/api/doctors/${currentProfileDoctor.id}/credentials`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                username: doctorUsernameInput.value.trim(),
                password: doctorPasswordInput.value.trim()
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                doctorProfileResult.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                loadDoctors();
            } else {
                doctorProfileResult.textContent = data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
            }
        });
    };
    doctorProfileViewApps.onclick = () => {
        if (!currentProfileDoctor) return;
        doctorProfileModal.style.display = 'none';
        loadAppointments(currentProfileDoctor.id, currentProfileDoctor.name, currentProfileDoctor.specialty);
    };

    // --- –ú–æ–¥–∞–ª–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞ ---
    const editDoctorModal = document.getElementById('edit-doctor-modal');
    const editDoctorForm = document.getElementById('edit-doctor-form');
    const editDoctorName = document.getElementById('edit-doctor-name');
    const editDoctorSpecialty = document.getElementById('edit-doctor-specialty');
    const editDoctorUsername = document.getElementById('edit-doctor-username');
    const editDoctorCancel = document.getElementById('edit-doctor-cancel');
    const editDoctorResult = document.getElementById('edit-doctor-result');
    let currentEditDoctorId = null;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –§–ò–û –≤—Ä–∞—á–∞: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã, –º–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤
    if (editDoctorName) {
        editDoctorName.addEventListener('input', (e) => {
            let val = e.target.value;
            val = val.replace(/[^–ê-–Ø–∞-—èA-Za-z–Å—ë.\s]/g, '');
            if (val.length > 40) val = val.slice(0, 40);
            e.target.value = val;
        });
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    function openEditDoctorModal(doc) {
        currentEditDoctorId = doc.id;
        editDoctorName.value = doc.name || '';
        editDoctorSpecialty.value = doc.specialty || '';
        editDoctorUsername.value = doc.username || '';
        editDoctorResult.textContent = '';
        openModal(editDoctorModal);
    }
    if (editDoctorCancel) {
        editDoctorCancel.onclick = () => {
            editDoctorModal.style.display = 'none';
        };
    }
    editDoctorForm.onsubmit = (e) => {
        e.preventDefault();
        if (!currentEditDoctorId) return;
        const saveBtn = editDoctorForm.querySelector('.signup-btn');
        const origText = saveBtn.textContent;
        saveBtn.innerHTML = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ... <span class="button-spinner"></span>';
        saveBtn.disabled = true;
        fetch(`/api/doctors/${currentEditDoctorId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                name: editDoctorName.value.trim(),
                specialty: editDoctorSpecialty.value.trim(),
                username: editDoctorUsername.value.trim()
            })
        })
        .then(res => res.json())
        .then(data => {
            saveBtn.innerHTML = origText;
            saveBtn.disabled = false;
            if (data.success) {
                editDoctorResult.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                setTimeout(() => {
                    editDoctorModal.style.display = 'none';
                    loadDoctors();
                }, 600);
            } else {
                editDoctorResult.textContent = data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
            }
        })
        .catch(() => {
            saveBtn.innerHTML = origText;
            saveBtn.disabled = false;
            editDoctorResult.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
        });
    };

    // --- –õ–æ–≥–∏ ---
    function actionIcon(action) {
        switch(action) {
            case 'admin_login': return 'üõ°Ô∏è';
            case 'doctor_login': return 'üë®‚Äç‚öïÔ∏è';
            case 'add_doctor': return '‚ûï';
            case 'delete_doctor': return 'üóëÔ∏è';
            case 'add_appointment': return 'üìÖ';
            case 'delete_appointment': return '‚ùå';
            case 'admin_login_fail': return '‚ö†Ô∏è';
            case 'doctor_login_fail': return '‚ö†Ô∏è';
            case 'login_blocked': return 'üö´';
            default: return '‚ÑπÔ∏è';
        }
    }
    function actionColor(action) {
        if (action.includes('fail') || action === 'login_blocked') return 'color:#f44336;';
        if (action === 'add_doctor' || action === 'add_appointment') return 'color:#4CAF50;';
        if (action === 'delete_doctor' || action === 'delete_appointment') return 'color:#1976d2;';
        return '';
    }
    function renderLogs(logs) {
        logsTableBody.innerHTML = logs.map((log, idx) => `
            <tr class="log-row" data-log-idx="${idx}">
                <td style="font-size:0.97em;white-space:nowrap;">${new Date(log.created_at).toLocaleString()}</td>
                <td style="${actionColor(log.action)}">${actionIcon(log.action)} ${log.action.replace(/_/g,' ')}</td>
                <td>${log.username || '-'}</td>
                <td style="max-width:180px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">${log.details || ''}</td>
            </tr>
        `).join('');
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ
        Array.from(logsTableBody.querySelectorAll('.log-row')).forEach(row => {
            row.onclick = function() {
                const idx = this.getAttribute('data-log-idx');
                const log = logs[idx];
                showLogDetailsModal(log);
            };
        });
    }
    function loadLogs(type = '') {
        fetch(`/api/audit-log${type ? '?type=' + encodeURIComponent(type) : ''}`, {
            headers: { 'Authorization': `Bearer ${token}` }
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) renderLogs(data.logs);
            else logsTableBody.innerHTML = '<tr><td colspan="4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤</td></tr>';
        });
    }
    if (showLogsBtn) {
        showLogsBtn.onclick = () => {
            openModal(logsModal);
            loadLogs();
        };
    }
    if (logsCloseBtn) logsCloseBtn.onclick = () => { logsModal.style.display = 'none'; };
    if (logsFilter) logsFilter.onchange = () => loadLogs(logsFilter.value);

    // --- –ú–æ–¥–∞–ª–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ª–æ–≥–∞ ---
    const logDetailsModal = document.getElementById('log-details-modal');
    const logDetailsContent = document.getElementById('log-details-content');
    const logDetailsClose = document.getElementById('log-details-close');
    function showLogDetailsModal(log) {
        logDetailsContent.innerHTML = `
            <b>–í—Ä–µ–º—è:</b> ${new Date(log.created_at).toLocaleString()}<br>
            <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> ${actionIcon(log.action)} ${log.action.replace(/_/g,' ')}<br>
            <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${log.username || '-'}<br>
            <b>–î–µ—Ç–∞–ª–∏:</b><br><div style="margin-top:4px;white-space:pre-wrap;">${log.details || ''}</div>
        `;
        openModal(logDetailsModal);
    }
    if (logDetailsClose) logDetailsClose.onclick = () => { logDetailsModal.style.display = 'none'; };
    if (logDetailsModal) {
        logDetailsModal.addEventListener('mousedown', function(e) {
            if (e.target === logDetailsModal) {
                const modalWindow = logDetailsModal.querySelector('.modal');
                if (modalWindow) modalWindow.classList.remove('show');
                setTimeout(() => {
                    logDetailsModal.style.display = 'none';
                    logDetailsContent.innerHTML = '';
                }, 250);
            }
        });
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function confirmModal(message) {
    return new Promise(resolve => {
        const modal = document.getElementById('confirm-modal');
        const text = document.getElementById('confirm-modal-text');
        const yes = document.getElementById('confirm-yes');
        const no = document.getElementById('confirm-no');
        text.textContent = message;
        modal.style.display = 'flex';
        function close(result) {
            modal.style.display = 'none';
            yes.onclick = null;
            no.onclick = null;
            resolve(result);
        }
        yes.onclick = () => close(true);
        no.onclick = () => close(false);
    });
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –º–æ–¥–∞–ª–æ–∫ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
window.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.modal-bg').forEach(function(bg) {
        bg.addEventListener('mousedown', function(e) {
            if (e.target === bg) {
                const modalWindow = bg.querySelector('.modal');
                if (modalWindow) {
                    modalWindow.classList.remove('show');
                    modalWindow.classList.add('hide');
                }
                setTimeout(() => {
                    bg.style.display = 'none';
                    if (modalWindow) modalWindow.classList.remove('hide');
                    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–∫–æ–Ω
                    if (bg.id === 'log-details-modal') {
                        const content = bg.querySelector('#log-details-content');
                        if (content) content.innerHTML = '';
                    }
                    if (bg.id === 'confirm-modal') {
                        const text = bg.querySelector('#confirm-modal-text');
                        if (text) text.textContent = '';
                    }
                }, 350);
            }
        });
    });
});